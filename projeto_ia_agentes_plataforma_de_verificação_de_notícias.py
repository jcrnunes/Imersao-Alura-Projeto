# -*- coding: utf-8 -*-
"""Projeto IA Agentes - Plataforma de verifica√ß√£o de not√≠cias.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17B9FLVYcFFHiBscq7-RtISQYZLnMmuJO
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

# Configura a API Key do Google Gemini

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

from IPython.display import HTML, Markdown

# Instalar Framework ADK de agentes do Google ################################################

!pip -q install google-adk

from google.adk.agents import Agent ## base de agentes
from google.adk.runners import Runner #osquestrador entre agentes
from google.adk.sessions import InMemorySessionService ##mem√≥ria interna do osquestrador
from google.adk.tools import google_search # tool
from google.genai import types  # Para criar conte√∫dos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a sa√≠da de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisi√ß√µes HTTP
import warnings

warnings.filterwarnings("ignore")

# Fun√ß√£o auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um servi√ßo de sess√£o em mem√≥ria
    session_service = InMemorySessionService()
    # Cria uma nova sess√£o (voc√™ pode personalizar os IDs conforme necess√°rio)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conte√∫do da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execu√ß√£o do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Fun√ß√£o auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('‚Ä¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

##########################################
# --- Agente 1: Buscador de Not√≠cias reais --- #
##########################################

def agente_buscador1(topico, data_de_hoje):
  buscador1 = Agent(
      name="agente_buscador1",
      model="gemini-2.0-flash",
      description="Agente que busca not√≠cias sobre o t√≥pico indicado",#preciso indicar o nome e modelo dele"
      tools=[google_search],
      instruction="""
      Voc√™ √© um assistente de pesquisa. A sua tarefa √© usar a ferramenta de busca do google (google_search)
      Para recuperar as ultimas not√≠cias muito relevantes sobre o t√≥pico abaixo.
      Foque em no m√°ximo 3 not√≠cias relevantes de cada item, com base na quantidade e entusiasmo das not√≠cias sobre ele.
      Al√©m disso, sempre priorize trazer dados t√©cnicos e n√∫meros sobre cada item.
      Item 1: Voc√™ deve priorizar a informa√ß√£o de not√≠cias reais, confirme sempre se os sites apresentados s√£o de fontes confi√°veis.
      Item 2: Voc√™ deve priorizar o levantamento de not√≠cias falsas sobre o t√≥pico, para que seja validado pelo verificador de not√≠cias.
      """

  )
  entrada_do_agente_buscador1 = f"T√≥pico: {topico}\nData de hoje: {data_de_hoje}" #Adiciono as duas entradas da fun√ßao criada acima
  # Executa o agente
  lancamento1 = call_agent(buscador1, entrada_do_agente_buscador1) #chamo agente para executa√ß√£o da fun√ß√£o acima com as entradas
  return lancamento1

################################################
# --- Agente 2: Verificador de not√≠cias --- #
################################################
def agente_verificador(topico, lancamentos_buscados):
    verificador = Agent(
        name="agente_verificador",
        model="gemini-2.0-flash",
        # Inserir as instru√ß√µes do Agente Planejador #################################################
        instruction="""
        Voc√™ √© um verificador de conte√∫do, especialista em an√°lise de not√≠cias reais e falsa.
        Com base na listas de informa√ß√µes levantadas pelos buscadores, voc√™ deve:
        usar a ferramenta de busca do Google (google_search) para verificar e validar de fato quais s√£o as not√≠ficas reais e falsas que foram apresentadas.
        Voc√™ tamb√©m pode usar o (google_search) para encontrar mais informa√ß√µes sobre os temas e aprofundar.
        Ao final, voc√™ ir√° elaborar um texto explicando a not√≠cia real e que informa√ß√£o falsa est√° sendo associada a essa not√≠cia.
        """,
        description="Agente que verifica not√≠cias", #vai organizar as ideias do buscador",
        tools=[google_search]
    )

    entrada_do_agente_verificador = f"T√≥pico:{topico}\nLan√ßamentos buscados: {lancamentos_buscados}"
    # Executa o agente
    verificador = call_agent(verificador, entrada_do_agente_verificador)
    return verificador

######################################
# --- Agente 3: Roteirista da informa√ß√µes --- #
######################################
def agente_redator(topico, plano_de_post):
    redator = Agent(
        name="agente_redator",
        model="gemini-2.0-flash",
        instruction="""
            Voc√™ √© um Redator jornal√≠stico de um dos principais jornais do pa√≠s.
            Voc√™ escreve de maneira formal mas acess√≠vel para o p√∫blico m√©dio.
            Utilize o tema fornecido e os pontos mais relevantes fornecidos e, com base nisso,
            escreva um roteiro para o √¢ncora do seu jornal apresentar ao vivo.
            A mensagem deve ser engajadora e informativa, que n√£o passe de 30 segundos de apresenta√ß√£o.
            """,
        description="Agente redator de jornal"
    )
    entrada_do_agente_redator = f"T√≥pico: {topico}\nPlano de post: {plano_de_post}"
    # Executa o agente
    rascunho = call_agent(redator, entrada_do_agente_redator)
    return rascunho

##########################################
# --- Agente 4: Apresentador --- #
##########################################
def agente_revisor(topico, rascunho_gerado):
    apresentador = Agent(
        name="agente_apresentador",
        model="gemini-2.0-flash",
        instruction="""
            Voc√™ √© o maior apresentador jornal√≠stico do principal jornal do seu pa√≠s.
            Crie um nome adequado para voc√™ e se apresente no in√≠cio do jornal com nome e sobrenome.
            Por ter um p√∫blico diversificado, use um tom de apresenta√ß√£o adequado e geral.
            Revise o roteiro indicado, verificando clareza, concis√£o, corre√ß√£o e tom.
            Se o roteiro estiver bom, apresente-o.
            Caso haja problemas, apresente-o com melhorias.
            """,
        description="Agente apresentador de jornal."

    )
    entrada_do_agente_apresentador = f"T√≥pico: {topico}\nRascunho: {rascunho_gerado}"
    # Executa o agente
    texto_revisado = call_agent(apresentador, entrada_do_agente_apresentador)
    return texto_revisado

data_de_hoje = date.today().strftime("%d/%m/%Y")

print("üöÄ Verifica√ß√£o de not√≠cias. üöÄ")

# --- Obter o T√≥pico do Usu√°rio ---
topico = input("‚ùì Por favor, digite o T√ìPICO sobre o qual voc√™ quer checar um fato: ")

# Inserir l√≥gica do sistema de agentes ################################################

if not topico:
    print("Voc√™ esqueceu de digitar o t√≥pico!")
else:
    print(f"√ìtimo! Vamos ent√£o verificar not√≠cias sobre {topico}")

    lancamento1 = agente_buscador1(topico, data_de_hoje)
    print("\n -- Resultado do agente 1 (Buscador) -- \n")
    display(to_markdown(lancamento1))
    print("--------------------------------------------")

    verificador = agente_verificador(topico, lancamento1)
    print("\n -- Resultado do agente 2 (Verificador) -- \n")
    display(to_markdown(verificador))
    print("--------------------------------------------")

    rascunho_gerado = agente_redator(topico, verificador)
    print("\n -- Resultado do agente 3 (Redator) -- \n")
    display(to_markdown(rascunho_gerado))
    print("--------------------------------------------")

    texto_revisado = agente_revisor(topico, rascunho_gerado)
    print("\n -- Resultado do agente 4 (Apresentador) -- \n")
    display(to_markdown(texto_revisado))


## Ideia: Agente analisador de fake news que te apresenta a not√≠cia real e
## a fake gerada recentemente